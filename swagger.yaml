openapi: 3.0.0
info:
  title: t-shirtstore API
  description: this is the API for t-shirtstore 
  version: 1.0.1

  contact: 
    email: rahulmondar@gmail.com
    url: https://rahulmondal.vercel.app

# servers:
#   - url: http://localhost:4000/api/v1
#     description: This is the localhost version of our app

servers: 
  - url: "{protocol}://{url}/api/{version}"
    description: this is the base url of our app
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      url:
        enum:
          - localhost:4000
        default: localhost:4000
      version:
        enum:
          - v1
          - v2
        default: v1

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
    BearerAuth:
      type: http
      scheme: bearer


paths: 
  /:
    get:
      tags: 
        - Home
      summary: This is the home route and it will returns a greet message
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: string
                example: "my string"
        400:
          description: bad request
        500:
          description: internal server error

  /register:
    post:
      tags: 
        - User
      summary: user could register themselves by providing username, email, password and a photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name 
                - email 
                - password 
                - avatar
              properties:
                name:
                  type: string
                  required: true 
                email:
                  type: string
                  required: true 
                password:
                  type: string
                  required: true 
                avatar:
                  in: formData
                  description: the uploaded file data
                  format: binary
                  type: file
                  required: true 
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name: 
                        type: string
                      _id: 
                        type: string
                      email: 
                        type: string
                      role: 
                        type: string
                      avatar: 
                        type: object
                        properties:
                          public_id: string
                          secure_url: string
                      createdAt: 
                        type: string
                      updatedAt: 
                        type: string
                  token: string
              example: 
                success: boolean
                user:
                  name:  string
                  _id: string
                  email:  string
                  role: string
                  avatar: 
                    public_id: string
                    secure_url: string
                  createdAt: string
                  updatedAt: string
                token: string
        400:
          description: bad request
        500:
          description: internal server error

  /login:
    post:
      tags: 
        - User
      summary: user could login by providing email, password
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - email 
                - password 
              properties:
                email:
                  type: string
                  required: true 
                password:
                  type: string
                  required: true 
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name: 
                        type: string
                      _id: 
                        type: string
                      email: 
                        type: string
                      role: 
                        type: string
                      avatar: 
                        type: object
                        properties:
                          public_id: string
                          secure_url: string
                      createdAt: 
                        type: string
                      updatedAt: 
                        type: string
                  token: string
              example: 
                success: boolean
                user:
                  name:  string
                  _id: string
                  email:  string
                  role: string
                  avatar: 
                    public_id: string
                    secure_url: string
                  createdAt: string
                  updatedAt: string
                token: string
        400:
          description: bad request
        500:
          description: internal server error

  /logout:
    get:
      tags: 
        - User
      summary: user could logout by this route
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example: 
                success: boolean
                message: string 
        400:
          description: bad request
        500:
          description: internal server error
                  
  /forgot_password:
    post:
      tags:
        - User
      summary: sends an email with link to forgot password. Contains the token for user validation. Public hosted version will not send email to your account. Use your own SMTP details to access this feature on local project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        200:
          description: All good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
              example: 
                success: boolean
                message: string  
        400:
          description: Bad request
        500:
          description: internal server error

  /password/reset/{token}:
    post:
      tags:
        - User
      summary: Allows user to reset password, validated based on token. send password and confirm password fields
      parameters: 
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: 
                - newPassword
                - confirmNewPassword
              properties:
                newPassword:
                  type: string  
                confirmNewPassword:
                  type: string  
      responses:
        200:
          description: all good success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      name: 
                        type: string
                      _id: 
                        type: string
                      email: 
                        type: string
                      role: 
                        type: string
                      avatar: 
                        type: object
                        properties:
                          public_id: string
                          secure_url: string
                      createdAt: 
                        type: string
                      updatedAt: 
                        type: string
                  token: string
              example: 
                success: boolean
                user:
                  name:  string
                  _id: string
                  email:  string
                  role: string
                  avatar: 
                    public_id: string
                    secure_url: string
                  createdAt: string
                  updatedAt: string
                token: string

  /getuserdetails:
    get:
      tags:
        - User
      summary: returns all the details of any logged in user
      responses:
        200:
          description: all good success
          application/json:
            schema:
              type: object
              properties: 
                name: 
                  type: string
                _id: 
                  type: string
                email: 
                  type: string
                role: 
                  type: string
                avatar: 
                  type: object
                  properties:
                    public_id: string
                    secure_url: string
                createdAt: 
                  type: string
                updatedAt: 
                  type: string
              example:
                name: string
                email: string
                _id: string
                role: string
                avatar:
                  public_id: string
                  secure_url: string
                createdAt: string
                updatedAt: string
        400:
          description: bad request
        500: 
          description: bad request

  /password/update:
    put:
      tags: 
        - User
      summary: logged in user could update their password by providing currentPassword and newPassword
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  required: true            
                newPassword:
                  type: string
                  required: true            
                confirmNewPassword:
                  type: string
                  required: true  
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: 
                    type: boolean
                  message:
                    type: string
              example:
                success: true
                message: string
        400:
          description: bad request          
        500:
          description: internal server error  

  /profile/update:
    put:
      tags: 
        - User
      summary: logged in user could update their name email or avatar through this route by providing name email and avatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                avatar:
                  in: formData
                  description: the uploaded file data
                  format: binary
                  type: file
      responses: 
        200:
          description: success all good 
          content:
            application/json:
              type: object
              schema:
                success: boolean
                token: string
                user: 
                  _id: string,
                  name: string,
                  email: string,
                  avatar:
                    type: object
                    properties:
                      public_id: string
                      secure_url: string
                  role: string,
                  createdAt: string,
                  updatedAt: string,
              example:
                success: true
                token: string
                user:
                  _id: string
                  name: string
                  email: string
                  avatar:
                    public_id: string
                    secure_url: string
                  role: string
                  createdAt: string
                  updatedAt: string
        400:
          description: bad request
        500:
          description: internal server error

  /admin/users:
    get:
      tags:
        - Admin_User
      summary: admin could get all the users by this route
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: boolean
                  users:
                    type: array
                    items: 
                      type: object
                      properties:
                        _id: string
                        name: string
                        email: string
                        role: string
                        avatar: 
                          type: object
                          properties:
                            public_id: string
                            secure_url: string
                        createdAt: string
                        updatedAt: string
        400:
          description: bad request                
        500:
          description: internal server error                

  /admin/user/{id}:
    get:
      tags:
        - Admin_User
      summary: admin could get details of any user 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string 
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: boolean
                  user:
                    type: object
                    properties:
                      name: string
                      _id: string
                      email: string
                      role: string
                      avatar: 
                        type: object
                        properties:
                          public_id: string
                          secure_url: string
                      createdAt: string
                      updatedAt: string
              example:
                _id: string
                name: string
                email: string
                role: string
                avatar:
                  public_id: string
                  secure_url: string
                createdAt: string
                updatedAt: string
        400:
          description: bad request
        500:
          description: internal server error
    put:
      tags:
        - Admin_User
      summary: admin could update any user role 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: 
                role: 
                  type: string
                  required: true
                  enum:
                    - admin
                    - user
                    - manager
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: boolean
                  message: string
              example:
                success: true
                message: string
    delete:
      tags:
        - Admin_User
      summary: admin could delete any user 
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string 
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: boolean
                  message: string
              example:
                success: true
                message: string

/manager/users:
    get:
      tags:
        - Manager_User
      summary: manager could get all the users [role - user]  by this route
      responses:
        200:
          description: success all good
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: boolean
                  users:
                    type: array
                    items: 
                      type: object
                      properties:
                        _id: string
                        name: string
                        email: string
                        role: string
                        avatar: 
                          type: object
                          properties:
                            public_id: string
                            secure_url: string
                        createdAt: string
                        updatedAt: string
        400:
          description: bad request                
        500:
          description: internal server error


